package tuenti

import Utils._

import scala.concurrent.Future

import scala.concurrent._
import scala.concurrent.duration._
import ExecutionContext.Implicits.global

object Problem6 extends App {

  val problemsToSolve = for (line <- fromFile(args.head).drop(1)) yield ProblemToSolve(line)

  println("Loading big sheet...")
  val sheet: List[List[Int]] = fromFile("sheet.data").tail.map { x => x.split(" ").toList.map(i => i.toInt) }

  def magicStream(list: List[Int], k: Int): Stream[Int] = {
    if (list.length < k) Stream.Empty else
      list.iterator.take(k).sum #:: magicStream(list.tail, k) // iterator?
  }

  def solve(p: ProblemToSolve): Int = {

    val slicedSheet = sheet.take(p.y1 + 1).drop(p.y0).map { x => x.take(p.x1 + 1).drop(p.x0) }

    println("Precomputing sums sheet...")

    val preComputedSheetFuture = slicedSheet.map { l => Future(magicStream(l, p.k).toList) }

    val preComputedSheet = Await.result(Future.sequence(preComputedSheetFuture), Duration(6000, "seconds"))

    println("Running magic calculus... Problem size is " + (2 * p.k * p.width * p.height) + " / 2*K = " + (2 * p.k) + " / W*H = " + (p.width * p.height))

    val outputFutures = (
      for {
        y <- 0 until p.height - 2 * p.k

      } yield Future {

        val block = preComputedSheet.iterator.drop(y)

        val v1 = (for {
          i <- 0 until p.k
        } yield {
          block.next.take(p.width - 2 * p.k)
        })

        block.drop(1)

        val v2 = (for {
          i <- 0 until p.k
        } yield {
          block.next.drop(p.k + 1)
        })

        (v1 ++ v2).transpose.map(_.sum).max
      })

    val output = Await.result(Future.sequence(outputFutures), Duration(6000, "seconds"))

    val solution = output.max

    println("Solution for " + p + " is " + solution)

    solution
  }

  val res = for {
    p <- problemsToSolve
  } yield solve(p)

  println(res)

  val output = (for (i <- 1 to res.length) yield "Case " + i + ": " + res(i - 1)).toList

  toFile(pretty(output), s"${args.head}.solved")

}

